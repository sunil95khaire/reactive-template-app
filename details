styles.css
Add in angular.json file under assets tag : "src/api"

numbers -  /^[0-9]*$/
alphabets - /[a-zA-Z \-\']/
alphabets and numbers - /^[a-zA-Z0-9_.-]*$/

npm install -g @angular/cli
npm install bootstrap

/* You can add global styles to this file, and also import other style files */
.negative-stock{
    background-color: red;    
}

.positive-stock{
    background-color: green;    
}

.left-margin{
    margin-left: 10px;
}

.font-bold{
    font-weight: bold;
}

tr a { 
    cursor: pointer; 
}

table {
    border-collapse: collapse;
}
table, th, td {
    border: 1px solid black;
}
.error {
    color: red;
}
.success {
    color: green;
} 
========================
index.html
<link href="http://maxcdn.bootstrapcdn.com/font-awesome/4.1.0/css/font-awesome.min.css" rel="stylesheet">
========================
export class User {
    userName: string;
	gender: string;
	isMarried: boolean = false;
	isTCAccepted: boolean;
}

======================== appmodule.ts
import { BrowserModule } from '@angular/platform-browser';
import { NgModule } from '@angular/core';
import { FormsModule, ReactiveFormsModule } from '@angular/forms';
import { HttpClientModule } from '@angular/common/http';

import { AppComponent } from './app.component';
import { EmployeeComponent } from './employee/employee.component';
import { AppRoutingModule } from './app-routing.module';
import { ViewEmployeeComponent } from './employee/view-employee/view-employee.component';
import { CreateEmployeeComponent } from './employee/create-employee/create-employee.component';
import { EmployeeService } from './employee/employee.service';
import { ReactiveFormComponent } from './reactive/reactive-form/reactive-form.component';
import { TemplateFormComponent } from './template/template-form/template-form.component';
import { GridexampleComponent } from './gridexample/gridexample.component';

@NgModule({
  declarations: [
    AppComponent,
    EmployeeComponent,
    ViewEmployeeComponent,
    CreateEmployeeComponent,
    ReactiveFormComponent,
    TemplateFormComponent,
    GridexampleComponent
  ],
  imports: [
    BrowserModule,
    FormsModule,
    ReactiveFormsModule,
    HttpClientModule,
    AppRoutingModule
  ],
  providers: [EmployeeService],
  bootstrap: [AppComponent]
})
export class AppModule { }

========================app.component.html

<div class=container>
  <nav class="navbar navbar-expand-lg navbar-light bg-light">
    <a routerLink="/home">Employee List </a>
    <a class="left-margin" [routerLink]="['/create', 0]"> Create Employee</a>
    <a class="left-margin" [routerLink]="['/template']"> Template Form</a>
    <a class="left-margin" [routerLink]="['/reactive']"> Reactive Form</a>
    <a class="left-margin" routerLink="/grid"> Grid Ex</a>
  </nav>
  <router-outlet></router-outlet>
</div>
========================app.routing.ts
import { NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { Routes, RouterModule } from '@angular/router';
import { ViewEmployeeComponent } from './employee/view-employee/view-employee.component';
import { EmployeeComponent } from './employee/employee.component';
import { CreateEmployeeComponent } from './employee/create-employee/create-employee.component';
import { TemplateFormComponent } from './template/template-form/template-form.component';
import { ReactiveFormComponent } from './reactive/reactive-form/reactive-form.component';
import { GridexampleComponent } from './gridexample/gridexample.component';

const routes : Routes = [
  { path: 'home', component: EmployeeComponent },
  { path: 'reactive', component: ReactiveFormComponent },
  { path: 'template', component: TemplateFormComponent },
  { path: 'grid', component: GridexampleComponent },
  { path: 'detail/:id', component: ViewEmployeeComponent },
  { path: 'create/:id', component: CreateEmployeeComponent },
  { path: '', redirectTo: '/home', pathMatch:'full' }
];

@NgModule({
  declarations: [],
  imports: [
    CommonModule,
    RouterModule.forRoot(routes)
  ],
  exports:[RouterModule]
})

export class AppRoutingModule { }

========================employee.json
[
    {
        "Id": 1,
        "FirstName": "Sunil",
        "LastName": "Khaire",
        "DOB": "2018-01-01",
        "Address": "test",
        "Age": 23
    },
 ]
========================
export class IEmployee {
    Id: number;
    FirstName: string;
    LastName: string;
    DOB: string;
    Address: string;
    Age: number;
    Gender: string;
}

======================== employee.service.ts

import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { IEmployee } from './employee';
import { Observable, throwError, of } from 'rxjs';
import { tap, catchError } from 'rxjs/operators';

@Injectable({
  providedIn: 'root'
})
export class EmployeeService {
  private _employeeUrl = './api/employee/employee.json';
  employess: IEmployee[] = [];
  isLoad: boolean = false;
  constructor(private _http: HttpClient) { }

  getEmployees(): Observable<IEmployee[]> {
    if(!this.isLoad) {
      this.isLoad = true; 
      return this._http.get<IEmployee[]>(this._employeeUrl).pipe(tap(
        _emp => this.employess = _emp
      ), catchError(this.handleError));       
    }     
      
    return of(this.employess);
  }

  addEmployee(employee){
    employee.Id = this.employess[this.employess.length - 1].Id + 1;
    this.employess.push(employee);    
  }

  updateEmployee(employee){
    const emp = this.employess.find(e => e.Id == employee.Id);
    emp.FirstName = employee.FirstName;
    emp.LastName = employee.LastName;
    emp.Address = employee.Address;
    emp.Age = employee.Age;
  }

  getEmployee(id): IEmployee {
    return this.employess.find(e => e.Id == id);
  }

  private handleError(err) {
    return throwError(err);
  }
}

========================employee-list.component.ts

import { Component, OnInit } from "@angular/core";
import { EmployeeService } from "./employee.service";
import { IEmployee } from "./employee";

@Component({
  selector: "app-employee",
  templateUrl: "./employee.component.html",
  styleUrls: ["./employee.component.css"]
})
export class EmployeeComponent implements OnInit {
  employees: IEmployee[];
  filteredemployees: IEmployee[];
  errorMessage: string = "";
  filterBy: string;

  sortType: string;
  sortReverse: boolean = false;

  constructor(private _empService: EmployeeService) {}

  ngOnInit() {
    this._empService.getEmployees().subscribe(
      emp => {
        this.employees = emp;
        this.filteredemployees = this.employees;
        this.sortOrders('FirstName');
      },
      error => (this.errorMessage = <any>error)
    );
  }

  Delete(id) {
    this.filteredemployees = this.filteredemployees.filter(e => e.Id != id);
  }

  Search() {
    this.filteredemployees = this.employees.filter(
      (emp: IEmployee) =>
        emp.FirstName.toLocaleLowerCase().indexOf(
          this.filterBy.toLocaleLowerCase()
        ) !== -1
    );
  }

  filterOrders() {
    this.filteredemployees = this.employees.filter(o =>
      Object.keys(o).some(k => {
        if (typeof o[k] === 'string')
          return o[k].toLowerCase().includes(this.filterBy.toLowerCase());
      })
    );
  }

  sortOrders(property) {
    this.sortType = property;
    this.sortReverse = !this.sortReverse;
    this.filteredemployees.sort(this.dynamicSort(property));
  }

  dynamicSort(property) {
    let sortOrder = -1;

    if (this.sortReverse) {
        sortOrder = 1;
    }

    return function(a, b) {
      let result =
        a[property] < b[property] ? -1 : a[property] > b[property] ? 1 : 0;
      return result * sortOrder;
    };
  }
}

========================employee.component.html

<label class="navbar-brand">Employee List</label>

<div class="row">
  <div class="col-md-3 form-group">
    <label class="control-label">Name Search</label>
    <input class="form-control" type="text" [(ngModel)]="filterBy"  (keyup)="Search()" />
  </div>
  <div class="col-md-2">
    <input
      type="button"
      value="Search"
      class="btn btn-primary"
      style="margin-top: 2em;"
      (click)="Search()"
    />
  </div>
</div>

<div class="table-responsive">
  <table
    class="table table-bordered"
    *ngIf="filteredemployees && filteredemployees.length"
  >
    <thead style="border-bottom: 0">
      <tr>
        <th>
          <a style="color:blue" [href]="" (click)="sortOrders('FirstName')">
            Name
            <span
              *ngIf="sortType == 'FirstName' && !sortReverse"
              class="fa fa-caret-down"
            ></span>
            <span
              *ngIf="sortType == 'FirstName' && sortReverse"
              class="fa fa-caret-up"
            ></span>
          </a>
        </th>
        <th><a style="color:blue" [href]="" (click)="sortOrders('LastName')">
          Surname
          <span
            *ngIf="sortType == 'LastName' && !sortReverse"
            class="fa fa-caret-down"
          ></span>
          <span
            *ngIf="sortType == 'LastName' && sortReverse"
            class="fa fa-caret-up"
          ></span>
        </a></th>
        <th>DOB</th>
        <th>Address</th>
        <th>Age</th>
        <th></th>
      </tr>
    </thead>
    <tbody>
      <tr
        *ngFor="let employee of filteredemployees"
        (click)="employeeClick(employee.Id)"
      >
        <td>
          <a routerLink="/detail/{{ employee.Id }}">{{ employee.FirstName }}</a>
        </td>
        <td>{{ employee.LastName }}</td>
        <td>{{ employee.DOB | date: "dd-MM-yyyy" }}</td>
        <td>{{ employee.Address }}</td>
        <td>{{ employee.Age }}</td>
        <td>
          <button class="btn-danger" (click)="Delete(employee.Id)">X</button>
        </td>
      </tr>
    </tbody>
  </table>
  <div *ngIf="!(filteredemployees && filteredemployees.length)">
    No Employees
  </div>
</div>

======================== viewemployee.ts
import { Component, OnInit } from '@angular/core';
import { IEmployee } from '../employee';
import { EmployeeService } from '../employee.service';
import { ActivatedRoute, Router } from '@angular/router';
import { Location } from '@angular/common';

@Component({
  selector: 'app-view-employee',
  templateUrl: './view-employee.component.html',
  styleUrls: ['./view-employee.component.css']
})
export class ViewEmployeeComponent implements OnInit {

  employee: IEmployee; // = new IEmployee();
  employees: IEmployee[];

  constructor(private service: EmployeeService, private route: ActivatedRoute,
    private router: Router, private location: Location) { }

  ngOnInit() {
    const id = this.route.snapshot.paramMap.get('id');
    this.employee = this.service.getEmployee(id);
  }

  goBack(){
    this.location.back();
  }

  editEmployee() {
    this.router.navigate(['/create', this.employee.Id]);
  }

  save(emp) {
    console.log(emp);
  }

  back(){
    this.location.back();
  }
}

======================== view-employee.component.html

<label class="navbar-brand">Employee Details</label>
<div *ngIf="employee">
  <div class="row">
    <label class="col-md-2 font-bold">First Name</label>
    <label class="col-md-4 form-control-label">{{ employee.FirstName }}</label>
  </div>

  <div class="row">
    <label class="col-md-2 font-bold">Last name</label>
    <label class="col-md-4 form-control-label">{{ employee.LastName }}</label>
  </div>

  <div class="row">
    <label class="col-md-2 font-bold">DOB</label>
    <label class="col-md-4 form-control-label">{{ employee.DOB }}</label>
  </div>

  <div class="row">
    <label class="col-md-2 font-bold">Address</label>
    <label class="col-md-4 form-control-label">{{ employee.Address }}</label>
  </div>

  <div class="row">
    <label class="col-md-2 font-bold">Age</label>
    <label class="col-md-4 form-control-label">{{ employee.Age }}</label>
  </div>

  <div class="row">
    <div class="col-md-11">
      <input
        type="button"
        (click)="goBack()"
        value="Back"
        class="btn btn-primary pull-left"
      />
    </div>
    <button
      style="margin-left: 1em"
      [routerLink]="['/create', employee.Id]"
      class="btn btn-primary pull-right"
    >
      Edit
    </button>
  </div>
</div>

<!-- <form #empform="ngForm" (ngSubmit)="save(empform)">
  <div class="row">
    <div class="col-md-6">
      <div class="form-group">
        <Label class="form-control-label">First Name</Label>
        <input name="firstname" required
          class="form-control"
          type="text"
          [(ngModel)]="employee.FirstName"
        />
      </div>
      <div class="form-group">
        <Label class="form-control-label">Last Name</Label>
        <input name="lastname" required
          class="form-control"
          type="text"
          [(ngModel)]="employee.LastName"
        />
      </div>
      <div class="form-group">
        <Label class="form-control-label">Age</Label>
        <input name="age" required class="form-control" type="text" [(ngModel)]="employee.Age" />
      </div>
      <div class="form-group">
        <Label class="form-control-label">Gender</Label>
        <input value="male" name="gender" required type="radio" [(ngModel)]="employee.Gender"/>Male
        <input value="female" name="gender" required type="radio" [(ngModel)]="employee.Gender" />Female
        <div *ngIf="gender.invalid"> 
            Gender required. 
        </div> 
      </div>
    </div>
    <div class="col-md-6">
      <div class="form-group">
        <Label class="form-control-label">Address</Label>
        <input name="address" required
          class="form-control"
          type="text"
          [(ngModel)]="employee.Address"
        />
      </div>
      <div class="form-group">
        <Label class="form-control-label">DOB</Label>
        <input name="dob" required class="form-control" type="date" [(ngModel)]="employee.DOB" />
      </div>
      <div class="form-group">
        <Label class="form-control-label">Select City</Label>
        <select name="city" required class="form-control" [(ngModel)]="employee.City">
          <option [value]="-1">Select City</option>
          <option value="1">Pune</option>
          <option value="2">Mumbai</option>
          <option value="3">Banglore</option>
        </select>
      </div>
    </div>
  </div>

  <div class="row">
    <div class="col-md-11">
      <input type="button" (click)="back()" class="btn-primary" value="Cancel"/>
    </div>
    <div class="col-md-1"><button [disabled]="empform.invalid" type="submit" class="btn-primary">Save</button></div>
  </div>
</form> -->

======================== create-employee.component.ts

import { Component, OnInit } from '@angular/core';
import { IEmployee } from '../employee';
import { EmployeeService } from '../employee.service';
import { Router, ActivatedRoute } from '@angular/router';
import { NgForm } from '@angular/forms';

@Component({
  selector: 'app-create-employee',
  templateUrl: './create-employee.component.html',
  styleUrls: ['./create-employee.component.css']
})
export class CreateEmployeeComponent implements OnInit {

  employees: IEmployee[];  
  errorMessage: string;  
  isEdit: boolean;
  id: string;

  employee: IEmployee = new IEmployee();

  constructor(
    private service: EmployeeService,
    private router: Router,
    private route: ActivatedRoute
  ) {}

  ngOnInit() {
    //const id = this.route.snapshot.paramMap.get("id");
    this.route.params.subscribe(params => {
      this.id = params['id'];
      this.initialiseState(); // reset and set based on new parameter this time
  });

    this.isEdit = this.id != "0" && this.id != "null";
    if (this.isEdit) {
      this.employee = this.service.getEmployee(this.id);
    }
  }

  initialiseState(){
    this.employee = new IEmployee();
  }

  savePatient(empForm: NgForm): void {
    var emp = Object.assign({}, this.employee);
    this.isEdit ? this.service.updateEmployee(emp) : this.service.addEmployee(emp);
    this.navigateToEmployeeList();
  }

  navigateToEmployeeList() {
    this.router.navigate(["/home"]);
  }
}

======================== create-employee.component.html

<label class="navbar-brand">Add Employee</label>   
<div *ngIf='employee'></div>
<form #empForm="ngForm" (ngSubmit)="savePatient(empForm)">
  <div class="row">
    <div class="col-md-6">
      <div class="form-group" [class.was-validated]="firstname.invalid && firstname.touched">
        <label for="firstname" class="form-control-label">First Name</label>
        <input  type="text" name="firstname" placeholder="Enter First Name" required class="form-control"
          id="firstname" [(ngModel)]="employee.FirstName" #firstname="ngModel">
        <div class="invalid-feedback" *ngIf="firstname.invalid && firstname.touched">Name is mandatory.</div>
      </div>

      <div class="form-group">
        <label for="patientDob" class="form-control-label">Birth Date</label>
        <input type="date" name="patientDob" placeholder="DD/MM/YYYY" required class="form-control" 
          id="patientDob" [(ngModel)]="employee.DOB"
          #patientDob="ngModel">
      </div>

      <div class="form-group" [class.was-validated]="age.invalid && age.touched">
        <label for="age" class="form-control-label">Age</label>
        <input  type="text" name="age" placeholder="Enter Age" required class="form-control"
          id="age" [(ngModel)]="employee.Age" #age="ngModel">
        <div class="invalid-feedback" *ngIf="age.invalid && age.touched">Age is mandatory.</div>
      </div>
    </div>

    <div class="col-md-6">
      <div class="form-group" [class.was-validated]="surNameControl.invalid && surNameControl.touched">
        <label for="surName" class="form-control-label">Last Name</label>
        <input  type="text" name="surName" placeholder="Enter Last Name" required class="form-control"
          id="surName" [(ngModel)]="employee.LastName" #surNameControl="ngModel">
        <div class="invalid-feedback" *ngIf="surNameControl.invalid && surNameControl.touched">LastName is mandatory.</div>
      </div>

      <div class="form-group" [class.was-validated]="address.invalid && address.touched">
        <label for="address" class="form-control-label">Address</label>
        <input  type="text" name="address" placeholder="Enter Address" required class="form-control"
          id="address" [(ngModel)]="employee.Address" #address="ngModel">
        <div class="invalid-feedback" *ngIf="address.invalid && address.touched">Gender is mandatory.</div>
      </div>

      <!-- <div class="form-group" [class.was-validated]="city.invalid && city.touched">
        <label for="city" class="form-control-label">City</label>
        <select id="city" name="city" required class="form-control" [(ngModel)]="employee.CityId" #city="ngModel">
          <option [value]="-1">Select City</option>
          <option [value]="city.Id" *ngFor="let city of cities">{{city.Name}}</option>
        </select>
        <div class="invalid-feedback" *ngIf="city.invalid && city.touched">City is mandatory.</div>
      </div> -->
    </div>
  </div>

  <div class="row">
    <div class=col-md-11>
      <input type="button" (click)="navigateToEmployeeList()" value="Cancel" class="btn btn-primary pull-left" />
    </div>
    <button style="margin-left: 1em" [disabled]="empForm.invalid" type="submit" class="btn btn-primary pull-right">Save</button>
  </div>

<br>

</form>

======================== reactive-form.component.ts

import { Component, OnInit } from "@angular/core";
import { FormGroup, FormControl, Validators } from "@angular/forms";
import { User } from "src/app/user";
import { UserService } from "src/app/user.service";

@Component({
  selector: "app-reactive-form",
  templateUrl: "./reactive-form.component.html",
  styleUrls: ["./reactive-form.component.css"]
})
export class ReactiveFormComponent implements OnInit {
  ngOnInit() {}

  user = new User();
  isValidFormSubmitted: boolean = null;

  userForm = new FormGroup({
    uname: new FormControl("", Validators.required),
    gender: new FormControl("", Validators.required),
    married: new FormControl(false),
    tc: new FormControl("", Validators.requiredTrue)
  });
  
  constructor(private userService: UserService) {}

  onFormSubmit() {
    this.isValidFormSubmitted = false;
    if (this.userForm.invalid) {
      return;
    }
    this.isValidFormSubmitted = true;
    console.log(this.userForm.valid);
    this.user.userName = this.userForm.value.uname; // this.userForm.get("uname").value;
    this.user.gender = this.userForm.get("gender").value;
    this.user.isMarried = this.userForm.get("married").value;
    this.user.isTCAccepted = this.userForm.get("tc").value;
    this.userService.createUser(this.user);
    this.reset();
  }

  reset() {
    this.userForm.reset({
      married: false
    });
  }

  setDefaultValues() {
    this.userForm.patchValue({
      uname: "Krishna",
      gender: "male",
      married: true
    });
  }
}

======================== reactive-form.component.html

<h3>Reactive Form</h3>
<p *ngIf="isValidFormSubmitted && userForm.pristine" [ngClass]="'success'">
  Form submitted successfully.
</p>
<form [formGroup]="userForm" (ngSubmit)="onFormSubmit()">
  <table>
    <tr>
      <td>Name:</td>
      <td>
        <input formControlName="uname" />
        <div
          *ngIf="
            userForm.get('uname').invalid &&
            isValidFormSubmitted != null &&
            !isValidFormSubmitted
          "
          [ngClass]="'error'"
        >
          Name required.
        </div>
      </td>
    </tr>
    <tr>
      <td>Gender:</td>
      <td>
        <input type="radio" value="male" formControlName="gender" /> Male
        <input type="radio" value="female" formControlName="gender" /> Female
        <div
          *ngIf="
            userForm.get('gender').invalid &&
            isValidFormSubmitted != null &&
            !isValidFormSubmitted
          "
          [ngClass]="'error'"
        >
          Gender required.
        </div>
      </td>
    </tr>
    <tr>
      <td>Are you married?</td>
      <td>
        <input type="checkbox" formControlName="married" />
      </td>
    </tr>
    <tr>
      <td>Accept T & C</td>
      <td>
        <input type="checkbox" formControlName="tc" />
        <div
          *ngIf="
            userForm.get('tc').invalid &&
            isValidFormSubmitted != null &&
            !isValidFormSubmitted
          "
          [ngClass]="'error'"
        >
          Accept T & C.
        </div>
      </td>
    </tr>
    <tr>
      <td colspan="2">
        <button>Submit</button>
        <button type="button" (click)="setDefaultValues()">Set Default</button>
        <button type="button" (click)="reset()">Reset</button>
      </td>
    </tr>
  </table>
</form>

======================== template-form.component.ts

import { Component, OnInit } from '@angular/core';
import { NgForm } from '@angular/forms';
import { UserService } from 'src/app/user.service';
import { User } from 'src/app/user';

@Component({
  selector: 'app-template-form',
  templateUrl: './template-form.component.html',
  styleUrls: ['./template-form.component.css']
})
export class TemplateFormComponent implements OnInit {

  ngOnInit() {
  }

  isValidFormSubmitted = false;
	user = new User();
  constructor(private userService: UserService) {	}
  
	onFormSubmit(form: NgForm) {
	   this.isValidFormSubmitted = false;
	   if(form.invalid){
		  return;	
	   } 	
	   this.isValidFormSubmitted = true;
	  //  this.user.userName = form.controls['uname'].value;
	  //  this.user.gender = form.controls['gender'].value;
	  //  this.user.isMarried = form.controls['married'].value;
	  //  this.user.isTCAccepted = form.controls['tc'].value;
	   this.userService.createUser(this.user);
	   this.resetForm(form);
  }
  
	resetForm(form: NgForm) {
	   this.user = new User();	
	   form.resetForm({
		   married: false
	   }); 
  }
  
	setDefaultValues() {
	   this.user.userName = 'Krishna';
	   this.user.gender = 'male';
	   this.user.isMarried = true;
	   this.user.isTCAccepted = false;
	}
}

======================== template-form.component.html

<h3>Template Driven Form</h3>
<p *ngIf="isValidFormSubmitted" [ngClass]="'success'">
  Form submitted successfully.
</p>
<form #userForm="ngForm" (ngSubmit)="onFormSubmit(userForm)">
  <table>
    <tr>
      <td>Name:</td>
      <td>
        <input
          name="uname"
          [(ngModel)]="user.userName"
          required
          #uname="ngModel"
        />
        <div
          *ngIf="uname.invalid && userForm.submitted && !isValidFormSubmitted"
          [ngClass]="'error'"
        >
          Name required.
        </div>
      </td>
    </tr>
    <tr>
      <td>Gender:</td>
      <td>
        <input
          type="radio"
          value="male"
          name="gender"
          [(ngModel)]="user.gender"
          required
          #gender="ngModel"
        />
        Male
        <input
          type="radio"
          value="female"
          name="gender"
          [(ngModel)]="user.gender"
          required
          #gender="ngModel"
        />
        Female
        <div
          *ngIf="gender.invalid && userForm.submitted && !isValidFormSubmitted"
          [ngClass]="'error'"
        >
          Gender required.
        </div>
      </td>
    </tr>
    <tr>
      <td>Are you married?</td>
      <td>
        <input type="checkbox" name="married" [(ngModel)]="user.isMarried" />
      </td>
    </tr>
    <tr>
      <td>Accept T & C</td>
      <td>
        <input
          type="checkbox"
          name="tc"
          [(ngModel)]="user.isTCAccepted"
          required
          #tc="ngModel"
        />
        <div
          *ngIf="tc.invalid && userForm.submitted && !isValidFormSubmitted"
          [ngClass]="'error'"
        >
          Accept T & C.
        </div>
      </td>
    </tr>
    <tr>
      <td colspan="2">
        <button>Submit</button>
        <button type="button" (click)="setDefaultValues()">Set Default</button>
        <button type="button" (click)="resetForm(userForm)">Reset</button>
      </td>
    </tr>
  </table>
</form>

======================== can-activate.guard.ts

import { Injectable } from '@angular/core';
import { CanActivate, ActivatedRouteSnapshot, RouterStateSnapshot } from '@angular/router';
import { Observable } from 'rxjs';

@Injectable({
  providedIn: 'root'
})
export class CanactivateGuard implements CanActivate {
  canActivate(
    next: ActivatedRouteSnapshot,
    state: RouterStateSnapshot): Observable<boolean> | Promise<boolean> | boolean {
    return true;
  }
}

======================== stock.service.ts

 import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { Observable, throwError, BehaviorSubject, Subject } from 'rxjs';
import { tap, catchError } from 'rxjs/operators';
import { IStock } from './stock';

@Injectable({
  providedIn: 'root'
})

export class StockService {
  private _stockUrl = './api/stocks/stocks.json';

  private messageSource = new BehaviorSubject('default message');
  currentMessage = this.messageSource.asObservable();

  isSidebarVisible: boolean = false;

  sidebarVisibilityChange: Subject<boolean> = new Subject<boolean>();

  constructor(private _http: HttpClient) {
    this.sidebarVisibilityChange.subscribe((value) => {
      this.isSidebarVisible = value
    });
  }

  toggleSidebarVisibility() {
    this.sidebarVisibilityChange.next(!this.isSidebarVisible);
  }
  
  getStocks(): Observable<IStock[]> {
    return this._http.get<IStock[]>(this._stockUrl).pipe(tap(), catchError(this.handleError));
  }

  changeMessage() {
    this.messageSource.next("new message");
  }

  private handleError(err) {
    return throwError(err);
  }
}

======================== stock.list.component.ts

import { Component, OnInit } from '@angular/core';
import { StockService } from './stock.service';
import { IStock } from './stock';
import { Observable } from 'rxjs';

function stockSubscriber(observer) {
  function generateStock() {
    setTimeout(() => {
      observer.next(stocksGlobal);
      generateStock();
    }, 2000);
  }
  generateStock();
}

const stockGenerator = new Observable(stockSubscriber);
var stocksGlobal: IStock[];
var isPositive: boolean = true;

@Component({
  selector: 'app-stocks',
  templateUrl: './stock-list.component.html',
  styleUrls: ['./stock-list.component.css']
})

export class StockListComponent implements OnInit {
  stocks: IStock[];
  filteredStocks: IStock[];
  errorMessage: string;
  filterBy: string;

  message: string;
  constructor(private _stockService: StockService) { }

  get isSidebarVisible(): boolean {
    return this._stockService.isSidebarVisible;
  }

  isvisible: boolean = false;
  ngOnInit() {
    this._stockService.sidebarVisibilityChange.subscribe(value => this.isvisible = value);
    this._stockService.currentMessage.subscribe(m => this.message = m);
    this._stockService.toggleSidebarVisibility();

    this._stockService.changeMessage();

   // this._stockService.sidebarVisibilityChange.subscribe(value => this.isvisible = value);
    this._stockService.currentMessage.subscribe(m => this.message = m);
    this._stockService.getStocks()
      .subscribe(stocks => {
        this.stocks = stocks;
        this.stocks.forEach(item => {
          calculatePercentage(item)
        });
        this.filteredStocks = this.stocks;
        stocksGlobal = this.filteredStocks;
      },
        error => this.errorMessage = <any>error);

    stockGenerator.subscribe({
      next(stocks) {
        this.stocksGlobal = stocks;
        let randNumber: number = isPositive ? Math.random() - 1 : Math.random() + 0.3;
        isPositive = !isPositive;

        this.stocksGlobal.forEach(stock => {
          stock.currentPrice += randNumber;
          calculatePercentage(stock);
        });
        this.filteredStocks = this.stocksGlobal;
      },
      complete() { console.log('Finished'); }
    });
  }

  SearchStock() {
    this.filteredStocks = this.stocks.filter((stock: IStock) =>
      stock.symbol.toLocaleLowerCase().indexOf(this.filterBy.toLocaleLowerCase()) !== -1);
  }
}

function calculatePercentage(stock: IStock) {
  stock.valueDate = new Date().toString();
  stock.percentChange = ((stock.currentPrice - stock.openingPrice) / stock.openingPrice) * 100;

  if (stock.openingPrice > stock.currentPrice) {
    stock.stockStatus = 'negative-stock';
  } else if (stock.openingPrice < stock.currentPrice) {
    stock.stockStatus = 'positive-stock';
  } else {
    stock.stockStatus = '';
  }
}

======================== stocklist.component.html

<div class='container'>
  <div *ngIf="isvisible" class='row' style="margin-top: 3vmax">
    <div class='col-md-3 form-group' style="margin-left: 1em;">
      <label class="control-label">Symbol Search</label>
      <input class="form-control" type='text' [(ngModel)]='filterBy' />
    </div>
    <div class='col-md-2'>
      <input type='button' value="Search" class="btn btn-primary" style="margin-top: 2em;" (click)="SearchStock()" />
    </div>
  </div>

  <div class=' col-md-12 table-responsive'>
    <table class='table table-bordered' *ngIf='stocks && stocks.length'>
      <thead>
        <tr>
          <th>Symbol</th>
          <th>Value Date</th>
          <th>Opening Price</th>
          <th>Currenct Price</th>
          <th>%Change</th>
        </tr>
      </thead>
      <tbody>
        <tr *ngFor='let stock of filteredStocks'>
          <td>{{ stock.symbol | uppercase }}</td>
          <td>{{ stock.valueDate | date: 'dd/MM/yyyy' }}</td>
          <td>{{ stock.openingPrice | number : '1.2-2'  }}</td>
          <td>{{ stock.currentPrice | number : '1.2-2' }}</td>
          <td class="{{ stock.stockStatus }}">{{ stock.percentChange | number : '1.2-2' }} %</td>
        </tr>
      </tbody>
    </table>
  </div>

</div>
======================== patient.service.ts

import { City } from './../models/city';
import { State } from './../models/state';
import { Patient } from './../models/patient';
import { Injectable } from '@angular/core';
import { Observable, BehaviorSubject, Subject } from 'rxjs';
import { HttpClient, HttpHeaders } from '@angular/common/http';
import { tap, catchError } from 'rxjs/operators';

const httpOptions = {
  headers: new HttpHeaders({ 'Content-Type': 'application/json' })
};

@Injectable({
  providedIn: 'root'
})
export class PatientService {

  private subject = new Subject<any>();

  sendMessage(message: string) {
    this.subject.next({ text: message });
  }

  clearMessage() {
    this.subject.next();
  }

  getMessage(): Observable<any> {
    return this.subject.asObservable();
  }

  session: string;
  sidebarVisibilityChange: Subject<string> = new Subject<string>();

  private _baseUrl = 'http://localhost:50660/api/Patient/';

  constructor(private _http: HttpClient) {
    this.sidebarVisibilityChange.subscribe((value) => {
      this.session = value
    });
  }

  getPatients(): Observable<Patient[]> {
    let url = this._baseUrl + 'GetPatients';
    return this._http.get<Patient[]>(url).pipe(tap(), catchError(this.handleError));
  }

  getStates(): Observable<State[]> {
    let url = this._baseUrl + 'GetStates';
    return this._http.get<State[]>(url).pipe(tap(), catchError(this.handleError));
  }

  getCities(): Observable<City[]> {
    let url = this._baseUrl + 'GetCities';
    return this._http.get<City[]>(url).pipe(tap(), catchError(this.handleError));
  }

  getStateCities(stateId: number): Observable<City[]> {
    let url = this._baseUrl + 'GetStateCities?stateId=' + stateId;
    return this._http.get<City[]>(url).pipe(tap(), catchError(this.handleError));
  }

  savePatient(patient: Patient): Observable<any> {
    let url = this._baseUrl + 'SavePatient';
    let body = JSON.stringify(patient);
    return this._http.post(url, body, httpOptions).pipe(tap(), catchError(this.handleError));
  }

  private handleError(error: Response) {
    console.error(error);
    return Observable.throw(error.json() || 'Server error');
  }
}

======================== patient-list.html

<label class="navbar-brand">Patient List</label>   
<div class='table-responsive'>
  <table class='table table-bordered' *ngIf='patients && patients.length'>
    <thead style="border-bottom: 0">
      <tr>
        <th>Name</th>
        <th>SurName</th>
        <th>DOB</th>
        <th>Gender</th>
      </tr>
    </thead>
    <tbody>
      <tr *ngFor='let patient of patients' (click)="patientClick(patient.Name)">
        <td><a routerLink="/detail/{{patient.Name}}" >{{ patient.Name }}</a></td>
        <td>{{ patient.SurName }}</td>
        <td>{{ patient.DOB | date: 'dd-MM-yyyy' }}</td>
        <td>{{ patient.Gender }}</td>
      </tr>
    </tbody>
  </table>
</div>

<!-- <button (click)="sendMessage()" class="btn btn-primary">Send Message</button>
<button (click)="clearMessage()" class="btn btn-secondary">Clear Message</button> -->

======================== create-patient.component.ts

import { City } from "./../models/city";
import { PatientService } from "./patient.service";
import { State } from "./../models/state";
import { Patient } from "./../models/patient";
import { Component, OnInit } from "@angular/core";
import { NgForm } from "@angular/forms";
import { Router, ActivatedRoute } from "@angular/router";
import { IfStmt } from "@angular/compiler";

@Component({
  selector: "app-create-patient",
  templateUrl: "./create-patient.component.html"
  //styleUrls: ["./create-patient.component.css"]
})
export class CreatePatientComponent implements OnInit {
  patients: Patient[];
  states: State[];
  cities: City[];
  errorMessage: string;
  minAge: Date;
  maxAge: Date;
  isEdit: boolean;
  name: string;

  patient: Patient = new Patient();

  constructor(
    private service: PatientService,
    private router: Router,
    private route: ActivatedRoute
  ) {}

  ngOnInit() {
    //const name = this.route.snapshot.paramMap.get("name");
    this.route.params.subscribe(params => {
      this.name = params['name'];
      this.initialiseState(); // reset and set based on new parameter this time
  });
    this.patient.CityId = -1;
    this.patient.StateId = -1;
    this.patient.Gender = null;
    var today = new Date();
    this.minAge = new Date(
      today.getFullYear() - 100,
      today.getMonth(),
      today.getDate()
    );
    this.maxAge = new Date(
      today.getFullYear(),
      today.getMonth(),
      today.getDate()
    );

    this.service.getStates().subscribe(
      states => {
        this.states = states;
      },
      error => (this.errorMessage = <any>error)
    );

    this.isEdit = this.name != "0" && this.name != "null";
    if (this.isEdit) {
      this.service.getCities().subscribe(
        cities => {
          this.cities = cities;
          this.getPatientList(this.name);
        },
        error => (this.errorMessage = <any>error)
      );
    }
  }

  initialiseState(){
this.patient = new Patient();
  }

  getCities() {
    this.service.getStateCities(this.patient.StateId).subscribe(
      cities => {
        this.cities = cities;
      },
      error => (this.errorMessage = <any>error)
    );
  }

  getPatientList(name) {
    this.service.getPatients().subscribe(
      patients => {
        this.patients = patients;
        this.patient = this.patients.find(p => p.Name == name);
        var city = this.cities.find(c => c.Id == this.patient.CityId);
        this.patient.StateId = city.StateId;
        this.cities = this.cities.filter(
          c => c.StateId == this.patient.StateId
        );
        this.patient.DOB = new Date();
      },
      error => (this.errorMessage = <any>error)
    );
  }

  getPatients() {
    this.navigateToPatientList();
    // this.service.getPatients().subscribe(patients => {
    //   this.patients = patients;
    // }, error => (this.errorMessage = <any>error));
  }

  savePatient(patientForm: NgForm): void {
    var pat = Object.assign({}, this.patient);
    this.service.savePatient(pat).subscribe(
      pat => {
        //this.getPatients();
        this.navigateToPatientList();
      },
      error => (this.errorMessage = <any>error)
    );
    patientForm.reset();
  }

  navigateToPatientList() {
    this.router.navigate(["/home"]);
  }

  keyPress(event: any) {
    const pattern = /[a-zA-Z \-\']/;
    let inputChar = String.fromCharCode(event.charCode);

    if (!pattern.test(inputChar)) {
      event.preventDefault();
    }
  }
}

======================== create-patient.component.html

<!-- <app-customer-dashboard></app-customer-dashboard> -->
<label class="navbar-brand">Add Patient</label>   
<form #patientForm="ngForm" (ngSubmit)="savePatient(patientForm)">
  <div class="row">
    <div class="col-md-6">
      <div class="form-group" [class.was-validated]="patientname.invalid && patientname.touched">
        <label for="patientname" class="form-control-label">Name</label>
        <input (keypress)="keyPress($event)" type="text" name="patientname" placeholder="Enter Name" required class="form-control"
          id="patientname" [(ngModel)]="patient.Name" #patientname="ngModel">
        <div class="invalid-feedback" *ngIf="patientname.invalid && patientname.touched">Name is mandatory.</div>
      </div>

      <div class="form-group">
        <label for="patientDob" class="form-control-label">Birth Date</label>
        <input max="{{maxAge | date:'yyyy-MM-dd'}}" min="{{minAge | date:'yyyy-MM-dd'}}" type="date" name="patientDob" placeholder="DD/MM/YYYY" required class="form-control" id="patientDob" [(ngModel)]="patient.DOB"
          #patientDob="ngModel">
      </div>

      <div class="form-group" [class.was-validated]="state.invalid && state.touched">
        <label for="state" class="form-control-label">State</label>
        <select id="state" name="state" required class="form-control" (change)="getCities()" [(ngModel)]="patient.StateId" #state="ngModel">
          <option [value]="-1">Select State</option>
          <option [value]="state.Id" *ngFor="let state of states">{{state.Name}}</option>
        </select>
        <div class="invalid-feedback" *ngIf="state.invalid && state.touched">State is mandatory.</div>
      </div>
    </div>

    <div class="col-md-6">
      <div class="form-group" [class.was-validated]="surNameControl.invalid && surNameControl.touched">
        <label for="surName" class="form-control-label">SurName</label>
        <input (keypress)="keyPress($event)" type="text" name="surName" placeholder="Enter SurName" required class="form-control"
          id="surName" [(ngModel)]="patient.SurName" #surNameControl="ngModel">
        <div class="invalid-feedback" *ngIf="surNameControl.invalid && surNameControl.touched">SurName is mandatory.</div>
      </div>

      <div class="form-group" [class.was-validated]="gender.invalid && gender.touched">
        <label for="gender" class="form-control-label">Gender</label>
        <select id="gender" name="gender" required class="form-control" [(ngModel)]="patient.Gender" #gender="ngModel">
          <option [value]="null">Select Gender</option>
          <option value='M'>Male</option>
          <option value='F'>Female</option>
        </select>
        <div class="invalid-feedback" *ngIf="gender.invalid && gender.touched">Gender is mandatory.</div>
      </div>

      <div class="form-group" [class.was-validated]="city.invalid && city.touched">
        <label for="city" class="form-control-label">City</label>
        <select id="city" name="city" required class="form-control" [(ngModel)]="patient.CityId" #city="ngModel">
          <option [value]="-1">Select City</option>
          <option [value]="city.Id" *ngFor="let city of cities">{{city.Name}}</option>
        </select>
        <div class="invalid-feedback" *ngIf="city.invalid && city.touched">City is mandatory.</div>
      </div>
    </div>
  </div>

  <div class="row">
    <div class=col-md-11>
      <input type="button" (click)="getPatients()" value="Cancel" class="btn btn-primary pull-left" />
    </div>
    <button style="margin-left: 1em" [disabled]="patientForm.invalid" type="submit" class="btn btn-primary pull-right">Save</button>
  </div>

<br>

<!-- <app-list-patients [patients]="patients"></app-list-patients> -->

</form>

===== patient-detail.component.ts
<label class="navbar-brand">Patient Details</label> 
<div *ngIf="patient">
  <div class="row">
    <label class="col-md-2 font-bold">Name</label>
    <label class="col-md-4 form-control-label">{{ patient.Name }}</label>
  </div>

  <div class="row">
    <label class="col-md-2 font-bold">Surname</label>
    <label class="col-md-4 form-control-label">{{ patient.SurName }}</label>
  </div>

  <div class="row">
    <label class="col-md-2 font-bold">DOB</label>
    <label class="col-md-4 form-control-label">{{ patient.DOB }}</label>
  </div>

  <div class="row">
    <label class="col-md-2 font-bold">Gender</label>
    <label class="col-md-4 form-control-label">{{ patient.Gender }}</label>
  </div>

  <div class="row">
    <label class="col-md-2 font-bold">State</label>
    <label class="col-md-4 form-control-label">{{ patient.StateId }}</label>
  </div>

  <div class="row">
    <label class="col-md-2 font-bold">City</label>
    <label class="col-md-4 form-control-label">{{ patient.CityId }}</label>
  </div>

  <div class="row">
    <div class=col-md-11>
      <input type="button" (click)="goBack()" value="Back" class="btn btn-primary pull-left" />
    </div>
    <button style="margin-left: 1em" [routerLink]="['/create', patient.Name]" 
    class="btn btn-primary pull-right">Edit</button>
  </div>
</div>

=======patient-detail.component.ts

import { Component, OnInit } from '@angular/core';
import { PatientService } from '../patient.service';
import { Router, ActivatedRoute } from '@angular/router';
import { Patient } from 'src/app/models/patient';
import { Location } from '@angular/common';
import { State } from 'src/app/models/state';

@Component({
  selector: 'app-patient-detail',
  templateUrl: './patient-detail.component.html',
  styleUrls: ['./patient-detail.component.css']
})
export class PatientDetailComponent implements OnInit {

  patient: Patient;
  patients: Patient[];
  states: State[];

  constructor(private service: PatientService, private route: ActivatedRoute,
    private router: Router, private location: Location) { }

  ngOnInit() {
    this.service.getPatients().subscribe(patients => {
      this.patients = patients;
      const name = this.route.snapshot.paramMap.get('name');
      this.patient = this.patients.find(p => p.Name == name);
    });
  }

  goBack(){
    this.location.back();
  }

  editPatient() {
    this.router.navigate(['/create', this.patient.Name]);
  }
}

=========================================================select required validator

import { Directive, Input } from "@angular/core";
import {  NG_VALIDATORS,  Validator,  AbstractControl,  ValidationErrors} from "@angular/forms";

@Directive({
  selector: "[appSelectRequiredValidator]",
  providers: [
    {
      provide: NG_VALIDATORS,
      useExisting: SelectRequiredValidatorDirective,
      multi: true
    }
  ]
})
export class SelectRequiredValidatorDirective implements Validator {
  @Input() appSelectRequiredValidator: string;
  validate(c: AbstractControl): ValidationErrors {
    let res = c.value === this.appSelectRequiredValidator ? { 'defaultselected': true } : null;
    return res;
  }
}

======================================================
 this.patient.StateId = '-1';
 
.invalid-feedback11 {
    width: 100%;
    margin-top: .25rem;
    font-size: 80%;
    color: #dc3545;
}

.invalid-control {
    border-color: #dc3545;
}

<div class="form-group" >
        <label for="state" class="form-control-label">State</label>
        <select appSelectRequiredValidator="-1" id="state" name="state" class="form-control" (change)="getCities()" [(ngModel)]="patient.StateId" #state="ngModel"  [ngClass]="{'invalid-control' : state.touched && state.errors?.defaultselected}">
          <option value="-1">Select State</option>
          <option [value]="state.Id" *ngFor="let state of states">{{state.Name}}</option>
        </select>
        <div class="invalid-feedback11" *ngIf="state.touched && state.errors?.defaultselected">State is mandatory.</div>
      </div>
      
      ===================================================
      
      <!-- <app-customer-dashboard></app-customer-dashboard> -->
<label class="navbar-brand">Add Patient</label>   
<form #patientForm="ngForm" (ngSubmit)="savePatient(patientForm)">
  <div class="row">
    <div class="col-md-6">
      <div class="form-group" [class.was-validated]="patientname.invalid && patientname.touched">
        <label for="patientname" class="form-control-label">Name</label>
        <input (keypress)="keyPress($event)" type="text" name="patientname" placeholder="Enter Name" required class="form-control"
          id="patientname" [(ngModel)]="patient.Name" #patientname="ngModel">
        <div class="invalid-feedback" *ngIf="patientname.invalid && patientname.touched">Name is mandatory.</div>
      </div>

      <div class="form-group">
        <label for="patientDob" class="form-control-label">Birth Date</label>
        <input max="{{maxAge | date:'yyyy-MM-dd'}}" min="{{minAge | date:'yyyy-MM-dd'}}" 
        [ngClass]="{'invalid-control' : patientDob.touched && patientDob.invalid}" type="date" name="patientDob"
         placeholder="DD/MM/YYYY" required class="form-control" id="patientDob" [(ngModel)]="patient.DOB"
          #patientDob="ngModel">
          <div class="invalid-feedback11" *ngIf="patientDob.invalid && patientDob.touched">DOB is mandatory.</div>
      </div>

      <div class="form-group" >
        <label for="state" class="form-control-label">State</label>
        <select appSelectRequiredValidator="-1" id="state" name="state" class="form-control" (change)="getCities()" 
        [(ngModel)]="patient.StateId" #state="ngModel"  
        [ngClass]="{'invalid-control' : state.touched && state.errors?.defaultselected}">
          <option value="-1">Select State</option>
          <option [value]="state.Id" *ngFor="let state of states">{{state.Name}}</option>
        </select>
        <div class="invalid-feedback11" *ngIf="state.touched && state.errors?.defaultselected">State is mandatory.</div>
      </div>
    </div>

    <div class="col-md-6">
      <div class="form-group" [class.was-validated]="surNameControl.invalid && surNameControl.touched">
        <label for="surName" class="form-control-label">SurName</label>
        <input (keypress)="keyPress($event)" type="text" name="surName" placeholder="Enter SurName" required class="form-control"
          id="surName" [(ngModel)]="patient.SurName" #surNameControl="ngModel">
        <div class="invalid-feedback11" *ngIf="surNameControl.invalid && surNameControl.touched">SurName is mandatory.</div>
      </div>

      <div class="form-group">
        <label for="gender" class="form-control-label">Gender</label>
        <select appSelectRequiredValidator="-1" id="gender" name="gender" class="form-control" 
        [ngClass]="{'invalid-control' : gender.touched && gender.errors?.defaultselected}" 
        [(ngModel)]="patient.Gender" #gender="ngModel">
          <option value="-1">Select Gender</option>
          <option value='M'>Male</option>
          <option value='F'>Female</option>
        </select>
        <div class="invalid-feedback11" *ngIf="gender.touched && gender.errors?.defaultselected">Gender is mandatory.</div>
      </div>

      <div class="form-group">
        <label for="city" class="form-control-label">City</label>
        <select appSelectRequiredValidator="-1" id="city" name="city" required class="form-control" 
        [ngClass]="{'invalid-control' : city.touched && city.errors?.defaultselected}" 
        [(ngModel)]="patient.CityId" #city="ngModel">
          <option [value]="-1">Select City</option>
          <option [value]="city.Id" *ngFor="let city of cities">{{city.Name}}</option>
        </select>
        <div class="invalid-feedback11" *ngIf="city.errors?.defaultselected && city.touched">City is mandatory.</div>
      </div>
    </div>
  </div>

  <div class="row">
    <div class=col-md-11>
      <input type="button" (click)="getPatients()" value="Cancel" class="btn btn-primary pull-left" />
    </div>
    <button style="margin-left: 1em" [disabled]="patientForm.invalid" type="submit" class="btn btn-primary pull-right">Save</button>
  </div>

<br>

<!-- <app-list-patients [patients]="patients"></app-list-patients> -->

</form>



